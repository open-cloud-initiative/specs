// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tags/v1/tag_service.proto

package tags

import (
	context "context"
	api "github.com/open-cloud-initiative/specs/gen/go/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagsServiceClient is the client API for TagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagsServiceClient interface {
	// TagRessource is tagging a ressource with an existing or new tag.
	TagRessource(ctx context.Context, in *TagResourceRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// UntagRessource is removing a tag from a resource.
	UntagRessource(ctx context.Context, in *TagResourceRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// ListTags is listing all existing tags.
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
}

type tagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagsServiceClient(cc grpc.ClientConnInterface) TagsServiceClient {
	return &tagsServiceClient{cc}
}

func (c *tagsServiceClient) TagRessource(ctx context.Context, in *TagResourceRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.tags.v1.TagsService/TagRessource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) UntagRessource(ctx context.Context, in *TagResourceRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.tags.v1.TagsService/UntagRessource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagsServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, "/oci.cloud.tags.v1.TagsService/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagsServiceServer is the server API for TagsService service.
// All implementations should embed UnimplementedTagsServiceServer
// for forward compatibility
type TagsServiceServer interface {
	// TagRessource is tagging a ressource with an existing or new tag.
	TagRessource(context.Context, *TagResourceRequest) (*api.Operation, error)
	// UntagRessource is removing a tag from a resource.
	UntagRessource(context.Context, *TagResourceRequest) (*api.Operation, error)
	// ListTags is listing all existing tags.
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
}

// UnimplementedTagsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTagsServiceServer struct {
}

func (UnimplementedTagsServiceServer) TagRessource(context.Context, *TagResourceRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagRessource not implemented")
}
func (UnimplementedTagsServiceServer) UntagRessource(context.Context, *TagResourceRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntagRessource not implemented")
}
func (UnimplementedTagsServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}

// UnsafeTagsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagsServiceServer will
// result in compilation errors.
type UnsafeTagsServiceServer interface {
	mustEmbedUnimplementedTagsServiceServer()
}

func RegisterTagsServiceServer(s grpc.ServiceRegistrar, srv TagsServiceServer) {
	s.RegisterService(&TagsService_ServiceDesc, srv)
}

func _TagsService_TagRessource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).TagRessource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.tags.v1.TagsService/TagRessource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).TagRessource(ctx, req.(*TagResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_UntagRessource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).UntagRessource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.tags.v1.TagsService/UntagRessource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).UntagRessource(ctx, req.(*TagResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagsService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagsServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.tags.v1.TagsService/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagsServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagsService_ServiceDesc is the grpc.ServiceDesc for TagsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oci.cloud.tags.v1.TagsService",
	HandlerType: (*TagsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TagRessource",
			Handler:    _TagsService_TagRessource_Handler,
		},
		{
			MethodName: "UntagRessource",
			Handler:    _TagsService_UntagRessource_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _TagsService_ListTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tags/v1/tag_service.proto",
}
