// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dns/v1/dns_service.proto

package dns

import (
	context "context"
	api "github.com/open-cloud-initiative/specs/gen/go/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DNSZoneServiceClient is the client API for DNSZoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSZoneServiceClient interface {
	// Returns the specified DNS zone.
	//
	// To get the list of all available DNS zones, make a [List] request.
	Get(ctx context.Context, in *GetDNSZoneRequest, opts ...grpc.CallOption) (*DNSZone, error)
	// Retrieves the list of DNS zones..
	List(ctx context.Context, in *ListDNSZonesRequest, opts ...grpc.CallOption) (*ListDNSZonesResponse, error)
	// Creates a DNS zone.
	Create(ctx context.Context, in *CreateDNSZoneRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Updates the specified DNS zone.
	Update(ctx context.Context, in *UpdateDNSZoneRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Deletes the specified DNS zone.
	Delete(ctx context.Context, in *DeleteDNSZoneRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Returns the specified record set.
	GetRecordSet(ctx context.Context, in *GetDNSZoneRecordSetRequest, opts ...grpc.CallOption) (*RecordSet, error)
	// Retrieves the list of record sets..
	ListRecordSets(ctx context.Context, in *ListDNSZoneRecordSetsRequest, opts ...grpc.CallOption) (*ListDNSZoneRecordSetsResponse, error)
	// Method with strict control for changing zone state. Returns error when:
	// 1. Deleted record is not found.
	// 2. Found record with matched type and name but different TTL or value.
	// 3. Attempted to add record with existing name and type.
	// Deletions happen first. If a record with the same name and type exists in both lists,
	// then the existing record will be deleted, and a new one added.
	UpdateRecordSets(ctx context.Context, in *UpdateRecordSetsRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Method without strict control for changing zone state. Nothing happens if deleted record doesn't exist.
	// Deletes records that match all specified fields which allows to delete only specified records from a record set.
	UpsertRecordSets(ctx context.Context, in *UpsertRecordSetsRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Lists operations for the specified DNS zone.
	ListOperations(ctx context.Context, in *ListDNSZoneOperationsRequest, opts ...grpc.CallOption) (*ListDNSZoneOperationsResponse, error)
	// Atomically updates zone private networks
	UpdatePrivateNetworks(ctx context.Context, in *UpdateDNSZonePrivateNetworksRequest, opts ...grpc.CallOption) (*api.Operation, error)
}

type dNSZoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSZoneServiceClient(cc grpc.ClientConnInterface) DNSZoneServiceClient {
	return &dNSZoneServiceClient{cc}
}

func (c *dNSZoneServiceClient) Get(ctx context.Context, in *GetDNSZoneRequest, opts ...grpc.CallOption) (*DNSZone, error) {
	out := new(DNSZone)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) List(ctx context.Context, in *ListDNSZonesRequest, opts ...grpc.CallOption) (*ListDNSZonesResponse, error) {
	out := new(ListDNSZonesResponse)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) Create(ctx context.Context, in *CreateDNSZoneRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) Update(ctx context.Context, in *UpdateDNSZoneRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) Delete(ctx context.Context, in *DeleteDNSZoneRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) GetRecordSet(ctx context.Context, in *GetDNSZoneRecordSetRequest, opts ...grpc.CallOption) (*RecordSet, error) {
	out := new(RecordSet)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/GetRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) ListRecordSets(ctx context.Context, in *ListDNSZoneRecordSetsRequest, opts ...grpc.CallOption) (*ListDNSZoneRecordSetsResponse, error) {
	out := new(ListDNSZoneRecordSetsResponse)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/ListRecordSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) UpdateRecordSets(ctx context.Context, in *UpdateRecordSetsRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/UpdateRecordSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) UpsertRecordSets(ctx context.Context, in *UpsertRecordSetsRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/UpsertRecordSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) ListOperations(ctx context.Context, in *ListDNSZoneOperationsRequest, opts ...grpc.CallOption) (*ListDNSZoneOperationsResponse, error) {
	out := new(ListDNSZoneOperationsResponse)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSZoneServiceClient) UpdatePrivateNetworks(ctx context.Context, in *UpdateDNSZonePrivateNetworksRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/oci.cloud.dns.v1.DNSZoneService/UpdatePrivateNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSZoneServiceServer is the server API for DNSZoneService service.
// All implementations should embed UnimplementedDNSZoneServiceServer
// for forward compatibility
type DNSZoneServiceServer interface {
	// Returns the specified DNS zone.
	//
	// To get the list of all available DNS zones, make a [List] request.
	Get(context.Context, *GetDNSZoneRequest) (*DNSZone, error)
	// Retrieves the list of DNS zones..
	List(context.Context, *ListDNSZonesRequest) (*ListDNSZonesResponse, error)
	// Creates a DNS zone.
	Create(context.Context, *CreateDNSZoneRequest) (*api.Operation, error)
	// Updates the specified DNS zone.
	Update(context.Context, *UpdateDNSZoneRequest) (*api.Operation, error)
	// Deletes the specified DNS zone.
	Delete(context.Context, *DeleteDNSZoneRequest) (*api.Operation, error)
	// Returns the specified record set.
	GetRecordSet(context.Context, *GetDNSZoneRecordSetRequest) (*RecordSet, error)
	// Retrieves the list of record sets..
	ListRecordSets(context.Context, *ListDNSZoneRecordSetsRequest) (*ListDNSZoneRecordSetsResponse, error)
	// Method with strict control for changing zone state. Returns error when:
	// 1. Deleted record is not found.
	// 2. Found record with matched type and name but different TTL or value.
	// 3. Attempted to add record with existing name and type.
	// Deletions happen first. If a record with the same name and type exists in both lists,
	// then the existing record will be deleted, and a new one added.
	UpdateRecordSets(context.Context, *UpdateRecordSetsRequest) (*api.Operation, error)
	// Method without strict control for changing zone state. Nothing happens if deleted record doesn't exist.
	// Deletes records that match all specified fields which allows to delete only specified records from a record set.
	UpsertRecordSets(context.Context, *UpsertRecordSetsRequest) (*api.Operation, error)
	// Lists operations for the specified DNS zone.
	ListOperations(context.Context, *ListDNSZoneOperationsRequest) (*ListDNSZoneOperationsResponse, error)
	// Atomically updates zone private networks
	UpdatePrivateNetworks(context.Context, *UpdateDNSZonePrivateNetworksRequest) (*api.Operation, error)
}

// UnimplementedDNSZoneServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDNSZoneServiceServer struct {
}

func (UnimplementedDNSZoneServiceServer) Get(context.Context, *GetDNSZoneRequest) (*DNSZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDNSZoneServiceServer) List(context.Context, *ListDNSZonesRequest) (*ListDNSZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDNSZoneServiceServer) Create(context.Context, *CreateDNSZoneRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDNSZoneServiceServer) Update(context.Context, *UpdateDNSZoneRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDNSZoneServiceServer) Delete(context.Context, *DeleteDNSZoneRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDNSZoneServiceServer) GetRecordSet(context.Context, *GetDNSZoneRecordSetRequest) (*RecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordSet not implemented")
}
func (UnimplementedDNSZoneServiceServer) ListRecordSets(context.Context, *ListDNSZoneRecordSetsRequest) (*ListDNSZoneRecordSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecordSets not implemented")
}
func (UnimplementedDNSZoneServiceServer) UpdateRecordSets(context.Context, *UpdateRecordSetsRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordSets not implemented")
}
func (UnimplementedDNSZoneServiceServer) UpsertRecordSets(context.Context, *UpsertRecordSetsRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRecordSets not implemented")
}
func (UnimplementedDNSZoneServiceServer) ListOperations(context.Context, *ListDNSZoneOperationsRequest) (*ListDNSZoneOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedDNSZoneServiceServer) UpdatePrivateNetworks(context.Context, *UpdateDNSZonePrivateNetworksRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivateNetworks not implemented")
}

// UnsafeDNSZoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSZoneServiceServer will
// result in compilation errors.
type UnsafeDNSZoneServiceServer interface {
	mustEmbedUnimplementedDNSZoneServiceServer()
}

func RegisterDNSZoneServiceServer(s grpc.ServiceRegistrar, srv DNSZoneServiceServer) {
	s.RegisterService(&DNSZoneService_ServiceDesc, srv)
}

func _DNSZoneService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).Get(ctx, req.(*GetDNSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).List(ctx, req.(*ListDNSZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDNSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).Create(ctx, req.(*CreateDNSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDNSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).Update(ctx, req.(*UpdateDNSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDNSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).Delete(ctx, req.(*DeleteDNSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_GetRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSZoneRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).GetRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/GetRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).GetRecordSet(ctx, req.(*GetDNSZoneRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_ListRecordSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSZoneRecordSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).ListRecordSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/ListRecordSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).ListRecordSets(ctx, req.(*ListDNSZoneRecordSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_UpdateRecordSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).UpdateRecordSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/UpdateRecordSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).UpdateRecordSets(ctx, req.(*UpdateRecordSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_UpsertRecordSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRecordSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).UpsertRecordSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/UpsertRecordSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).UpsertRecordSets(ctx, req.(*UpsertRecordSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDNSZoneOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).ListOperations(ctx, req.(*ListDNSZoneOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSZoneService_UpdatePrivateNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDNSZonePrivateNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSZoneServiceServer).UpdatePrivateNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oci.cloud.dns.v1.DNSZoneService/UpdatePrivateNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSZoneServiceServer).UpdatePrivateNetworks(ctx, req.(*UpdateDNSZonePrivateNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DNSZoneService_ServiceDesc is the grpc.ServiceDesc for DNSZoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNSZoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oci.cloud.dns.v1.DNSZoneService",
	HandlerType: (*DNSZoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DNSZoneService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DNSZoneService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DNSZoneService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DNSZoneService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DNSZoneService_Delete_Handler,
		},
		{
			MethodName: "GetRecordSet",
			Handler:    _DNSZoneService_GetRecordSet_Handler,
		},
		{
			MethodName: "ListRecordSets",
			Handler:    _DNSZoneService_ListRecordSets_Handler,
		},
		{
			MethodName: "UpdateRecordSets",
			Handler:    _DNSZoneService_UpdateRecordSets_Handler,
		},
		{
			MethodName: "UpsertRecordSets",
			Handler:    _DNSZoneService_UpsertRecordSets_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _DNSZoneService_ListOperations_Handler,
		},
		{
			MethodName: "UpdatePrivateNetworks",
			Handler:    _DNSZoneService_UpdatePrivateNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns/v1/dns_service.proto",
}
